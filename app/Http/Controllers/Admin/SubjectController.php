<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Subject;
use App\Models\Teacher;
use Illuminate\Http\Request;

class SubjectController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $subjects = Subject::with(['teachers.user', 'students.user'])
            ->withCount(['teachers'])
            ->withCount(['students' => function($query) {
                $query->where('student_subject.enrollment_status', 'active');
            }])
            ->orderBy('name')
            ->paginate(10);

        return view('admin.subjects.index', compact('subjects'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('admin.subjects.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'code' => 'nullable|string|max:20|unique:subjects,code',
            'description' => 'nullable|string|max:1000',
        ]);

        // If code is empty, it will be auto-generated by the model
        $data = $request->all();
        if (empty($data['code'])) {
            unset($data['code']); // Remove empty code to trigger auto-generation
        }

        $subject = Subject::create($data);

        return redirect()->route('admin.subjects.index')->with('success', 'Subject created successfully!');
    }

    /**
     * Display the specified resource.
     */
    public function show(Subject $subject)
    {
        $subject->load([
            'teachers.user',
            'students.user',
            'students' => function($query) {
                $query->wherePivot('enrollment_status', 'active');
            }
        ]);

        return view('admin.subjects.show', compact('subject'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Subject $subject)
    {
        $teachers = Teacher::with('user')->get();

        return view('admin.subjects.edit', compact('subject', 'teachers'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Subject $subject)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'code' => 'required|string|max:20|unique:subjects,code,' . $subject->id,
            'description' => 'nullable|string|max:1000',
            'teachers' => 'nullable|array',
            'teachers.*' => 'exists:teachers,id',
        ]);

        $subject->update($request->only(['name', 'code', 'description']));

        // Sync teachers
        if ($request->has('teachers') && !empty($request->teachers)) {
            $subject->teachers()->sync($request->teachers);
        } else {
            $subject->teachers()->detach();
        }

        return redirect()->route('admin.subjects.index')->with('success', 'Subject updated successfully!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Subject $subject)
    {
        // Check if subject can be deleted
        if (!$subject->canBeDeleted()) {
            $reasons = [];
            
            if ($subject->hasActiveEnrollments()) {
                $reasons[] = 'has active enrollments';
            }
            
            if ($subject->hasAssignedTeachers()) {
                $reasons[] = 'has assigned teachers';
            }
            
            if ($subject->hasAnyEnrollments()) {
                $reasons[] = 'has enrollment history';
            }
            
            $message = 'Cannot delete subject: Subject ' . implode(', ', $reasons) . '.';
            
            return redirect()->route('admin.subjects.index')->with('error', $message);
        }

        $subject->delete();

        return redirect()->route('admin.subjects.index')->with('success', 'Subject deleted successfully!');
    }
}